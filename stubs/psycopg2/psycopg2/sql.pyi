from typing import Tuple
from collections.abc import Iterable, Iterator
from _psycopg import cursor, connection

class Composable:
    def __init__(self, wrapped: object) -> None: ...
    def as_string(self, context: cursor | connection) -> str: ...
    def __add__(self, other: Composable) -> Composed: ...
    def __mul__(self, n: int) -> Composed: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class Composed(Composable):
    def __init__(self, seq: Iterable[Composable]) -> None: ...
    @property
    def seq(self) -> list[Composable]: ...
    def __iter__(self) -> Iterator[Composable]: ...
    def join(self, joiner: SQL | str) -> Composed: ...

class SQL(Composable):
    def __init__(self, string: str) -> None: ...
    @property
    def string(self) -> str: ...
    def format(self, *args: Composable, **kwargs: Composable) -> Composed: ...
    def join(self, seq: Iterable[Composable]) -> Composed: ...

class Identifier(Composable):
    def __init__(self, *strings: str) -> None: ...
    @property
    def strings(self) -> Tuple[str, ...]: ...
    @property
    def string(self) -> str: ...

class Literal(Composable):
    @property
    def wrapped(self) -> object: ...

class Placeholder(Composable):
    def __init__(self, name: str | None = ...) -> None: ...
    @property
    def name(self) -> str | None: ...

NULL: SQL
DEFAULT: SQL
